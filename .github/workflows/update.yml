name: Generate Norsk Feed

on:
  schedule:
    - cron: '0 * * * *' # kör varje timme
  workflow_dispatch:

jobs:
  build-feed:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests lxml

      - name: Run feed generator
        run: python generate_feed.py
except Exception:
    NOK_STANDARD_SHIPPING = Decimal("132.38")

for item in items:
    product_type_text = find_child_text(item, "product_type", ns) or ""
    google_cat_text = find_child_text(item, "google_product_category", ns) or ""
    product_cat_combined = (product_type_text + " " + google_cat_text).strip().lower()
    if "norsk" not in product_cat_combined:
        continue

    new_item = ET.SubElement(channel, "item")
    pid = find_child_text(item, "id", ns) or find_child_text(item, "g:id", ns) or "unknown"
    title_text = find_child_text(item, "title", ns) or "no-title"
    included_ids.append(pid)
    included_titles.append(title_text)

    for tag in ("id", "title", "description", "link", "image_link", "availability", "product_type", "price"):
        val = find_child_text(item, tag, ns)
        if tag == "price":
            if val:
                d = safe_decimal_from_str(val)
                if d is not None:
                    nok = (d * CONVERSION_RATE).quantize(Decimal("0.01"), rounding=ROUND_HALF_UP)
                    out_val = f"{nok:.2f} NOK"
                else:
                    out_val = f"{NOK_STANDARD_SHIPPING:.2f} NOK"
            else:
                out_val = f"{NOK_STANDARD_SHIPPING:.2f} NOK"
            ET.SubElement(new_item, f"{{{G_NS}}}{tag}").text = out_val
            continue
        ET.SubElement(new_item, f"{{{G_NS}}}{tag}").text = val if val else "N/A"

    shipping_elem = ET.SubElement(new_item, f"{{{G_NS}}}shipping")
    ET.SubElement(shipping_elem, f"{{{G_NS}}}country").text = "NO"
    ET.SubElement(shipping_elem, f"{{{G_NS}}}service").text = "Standard"
    price_elem = find_child_text(new_item, "price", ns)
    price_val = safe_decimal_from_str(price_elem) or Decimal("0.00")
    shipping_price = Decimal("0.00") if price_val >= FREE_SHIPPING_THRESHOLD else NOK_STANDARD_SHIPPING
    ET.SubElement(shipping_elem, f"{{{G_NS}}}price").text = f"{shipping_price:.2f} NOK"
    ET.SubElement(shipping_elem, f"{{{G_NS}}}min_handling_time").text = "0"
    ET.SubElement(shipping_elem, f"{{{G_NS}}}max_handling_time").text = "1"
    ET.SubElement(shipping_elem, f"{{{G_NS}}}min_transit_time").text = "1"
    ET.SubElement(shipping_elem, f"{{{G_NS}}}max_transit_time").text = "9"

# ---------- skriv atomiskt + commit endast om ändring ----------
tmp_fd, tmp_path = tempfile.mkstemp(suffix=".xml", prefix="norsk-feed-", dir=OUTPUT_DIR)
os.close(tmp_fd)
tree_out = ET.ElementTree(rss)
tree_out.write(tmp_path, encoding="utf-8", xml_declaration=True, pretty_print=True)

update_needed = True
if os.path.exists(OUTPUT_FILE):
    if filecmp.cmp(tmp_path, OUTPUT_FILE, shallow=False):
        print("[info] Ingen ändring i XML - commit hoppar över.")
        update_needed = False

if update_needed:
    shutil.move(tmp_path, OUTPUT_FILE)
    print(f"[ok] Skriven fil: {OUTPUT_FILE}")
    # git commit & push
    try:
        subprocess.run(["git", "config", "user.name", "github-actions"], check=True)
        subprocess.run(["git", "config", "user.email", "actions@github.com"], check=True)
        subprocess.run(["git", "add", OUTPUT_FILE], check=True)
        commit_msg = f"Automatisk uppdatering av norsk-feed.xml ({time.strftime('%Y-%m-%d %H:%M:%S')})"
        subprocess.run(["git", "commit", "-m", commit_msg], check=True)
        subprocess.run(["git", "push"], check=True)
        print("[ok] XML uppdaterad och pushad till repo.")
    except subprocess.CalledProcessError as e:
        print(f"[warn] Git commit/push misslyckades: {e}")
else:
    os.remove(tmp_path)

if not included_ids:
    print("[warn] Ingen 'norsk' produkt hittades.")
sys.exit(0)
